// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: non_constant_identifier_names

import 'dart:ffi' as ffi;

/// Generated bindings
class LedgerFfiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LedgerFfiBindings(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LedgerFfiBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void ll_store_dart_post_cobject(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _ll_store_dart_post_cobject(
      ptr,
    );
  }

  late final _ll_store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'll_store_dart_post_cobject');
  late final _ll_store_dart_post_cobject = _ll_store_dart_post_cobjectPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> ll_cstring_to_void_ptr(
    ffi.Pointer<ffi.Char> ptr,
  ) {
    return _ll_cstring_to_void_ptr(
      ptr,
    );
  }

  late final _ll_cstring_to_void_ptrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Char>)>>('ll_cstring_to_void_ptr');
  late final _ll_cstring_to_void_ptr = _ll_cstring_to_void_ptrPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>)>();

  void ll_free_cstring(
    ffi.Pointer<ffi.Char> ptr,
  ) {
    return _ll_free_cstring(
      ptr,
    );
  }

  late final _ll_free_cstringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'll_free_cstring');
  late final _ll_free_cstring =
      _ll_free_cstringPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void ll_get_ledger_devices(
    int resultPort,
  ) {
    return _ll_get_ledger_devices(
      resultPort,
    );
  }

  late final _ll_get_ledger_devicesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.LongLong)>>(
          'll_get_ledger_devices');
  late final _ll_get_ledger_devices =
      _ll_get_ledger_devicesPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> ll_create_ledger_transport(
    ffi.Pointer<ffi.Char> path,
  ) {
    return _ll_create_ledger_transport(
      path,
    );
  }

  late final _ll_create_ledger_transportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('ll_create_ledger_transport');
  late final _ll_create_ledger_transport = _ll_create_ledger_transportPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void ll_ledger_transport_free_ptr(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _ll_ledger_transport_free_ptr(
      ptr,
    );
  }

  late final _ll_ledger_transport_free_ptrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'll_ledger_transport_free_ptr');
  late final _ll_ledger_transport_free_ptr = _ll_ledger_transport_free_ptrPtr
      .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void ll_ledger_exchange(
    int resultPort,
    ffi.Pointer<ffi.Void> transport,
    int cla,
    int ins,
    int p1,
    int p2,
    ffi.Pointer<ffi.Char> data,
  ) {
    return _ll_ledger_exchange(
      resultPort,
      transport,
      cla,
      ins,
      p1,
      p2,
      data,
    );
  }

  late final _ll_ledger_exchangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.LongLong,
              ffi.Pointer<ffi.Void>,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Char>)>>('ll_ledger_exchange');
  late final _ll_ledger_exchange = _ll_ledger_exchangePtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Void>, int, int, int, int,
          ffi.Pointer<ffi.Char>)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final LedgerFfiBindings _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get ll_ledger_transport_free_ptr =>
          _library._ll_ledger_transport_free_ptrPtr;
}
